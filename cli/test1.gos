func ttt12() ( queueID int, problem string ) {
{

log.Trace("some trace: \"aaa\"")
return 34, "Delivery date is " + fmt.Sprintf("%d", 12)
}
{
return 0, "queue not found"
}
}

func checkMap() {
  tt := test.TestObject
  val := tt.MapValue["a"]
  val2 := "cc " + val + "bb"
  cr := tt.MapValue["a"] == "aaa"
  if tt.MapValue["a"] == "aaa" {
    fmt.Println("ok: ", cr)
  }
  if tt.MapValue["a"] == "aaab" {
      fmt.Println("not ok")
  }
  if tt.MapValue["a"] == "aaa" {
      fmt.Println("ok")
    }
  fmt.Println(val, val2)
}

func checkRet(param string) ( queueID int, problem string ) {
  if param == "qwert" {
    fmt.Println("it is", param)
  }
  {
    fmt.Println("anonymous")
  }
  return 0, param + " aaa" + " bbb"
}

func ttt(order string, hour int) ( queueID int, problem string ) {
var conditionResult bool
conditionResult = order == "V" && hour >= 9 && hour <= 13
fmt.Println("conditionResult: ", conditionResult)
if order == "P1" {
if hour >= 9 && hour <= 13 {
return 14, ""
}
if hour >= 13 && hour <= 17 {
return 16, ""
}
if hour >= 17 && hour <= 21 {
return 18, ""
}
{
return 34, "Delivery date is " + fmt.Sprintf("%d", hour)
}

}
if order == "P3" {
if hour >= 8 && hour <= 14 {
return 22, ""
}
if hour >= 14 && hour <= 20 {
return 24, ""
}
{
return 32, "Delivery date is " + fmt.Sprintf("%d", hour)
}

}
return 0, "queue not found"
}
