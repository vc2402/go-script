// Code generated by goyacc -o gos.go -p Gos -l gos.y. DO NOT EDIT.

package compiler

import __yyfmt__ "fmt"

import (
	"fmt"
	"go/scanner"
	"go/token"
)

type GosSymType struct {
	yys  int
	val  string
	vals []string
	fn   *function
	//	functions []*function
	args         []*varDef
	arg          *varDef
	File         File
	statement    *statement
	statements   []*statement
	typeRef      *typeRef
	lvalue       *lvalue
	lvList       []*lvalue
	constant     *constant
	expression   *expression
	arrayAccess  *arrayAccess
	fieldAccess  *fieldAccess
	expressions  []*expression
	funcCall     *funcCall
	varDef       *varDef
	assignment   *assignment
	fileContents []any
	ifStatement  *ifStatement
	forStatement *forStatement
	methodCall   *methodCall
}

const IDENT = 57346
const INT = 57347
const FLOAT = 57348
const CHAR = 57349
const STRING = 57350
const BOOL = 57351
const LOR = 57352
const REM = 57353
const LAND = 57354
const GT = 57355
const LT = 57356
const EQ = 57357
const NEQ = 57358
const GTE = 57359
const LTE = 57360
const INC = 57361
const DEC = 57362
const DEFINE = 57363
const ELLIPSIS = 57364
const VAR = 57365
const FUNC = 57366
const PACKAGE = 57367
const MAP = 57368
const IF = 57369
const ELSE = 57370
const SWITCH = 57371
const CASE = 57372
const FOR = 57373
const BREAK = 57374
const CONTINUE = 57375
const RANGE = 57376
const RETURN = 57377

var GosToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"INT",
	"FLOAT",
	"CHAR",
	"STRING",
	"BOOL",
	"'+'",
	"'-'",
	"LOR",
	"'*'",
	"'/'",
	"REM",
	"LAND",
	"GT",
	"LT",
	"EQ",
	"NEQ",
	"GTE",
	"LTE",
	"'!'",
	"INC",
	"DEC",
	"DEFINE",
	"'{'",
	"'}'",
	"'='",
	"'['",
	"']'",
	"','",
	"'.'",
	"'('",
	"')'",
	"';'",
	"':'",
	"ELLIPSIS",
	"VAR",
	"FUNC",
	"PACKAGE",
	"MAP",
	"IF",
	"ELSE",
	"SWITCH",
	"CASE",
	"FOR",
	"BREAK",
	"CONTINUE",
	"RANGE",
	"RETURN",
}

var GosStatenames = [...]string{}

const GosEofCode = 1
const GosErrCode = 2
const GosInitialStackSize = 16

// The parser expects the lexer to return 0 on EOF.  Give it a name
// for clarity.
const eof = 0

// The parser uses the type <prefix>Lex as a lexer. It must provide
// the methods Lex(*<prefix>SymType) int and Error(string).
type GosLex struct {
	S    scanner.Scanner
	Pos  token.Pos
	Fset *token.FileSet
	File
}

// The parser calls this method to get each new token. This
// implementation returns operators and NUM.
func (x *GosLex) Lex(yylval *GosSymType) int {
	for {
		pos, tok, lit := x.S.Scan()
		if tok == token.EOF {
			return eof
		}
		x.Pos = pos
		yylval.val = lit
		switch tok {
		case token.INT:
			return INT
		case token.CHAR:
			return CHAR
		case token.STRING:
			return STRING
		case token.FLOAT:
			return FLOAT
		case token.ADD:
			return '+'
		case token.SUB:
			return '-'
		case token.MUL:
			return '*'
		case token.QUO:
			return '/'
		case token.LOR:
			return LOR
		case token.LAND:
			return LAND
		case token.DEFINE:
			return DEFINE
		case token.GTR:
			return GT
		case token.LSS:
			return LT
		case token.INC:
			return INC
		case token.DEC:
			return DEC
		case token.EQL:
			return EQ
		case token.NEQ:
			return NEQ
		case token.LEQ:
			return LTE
		case token.GEQ:
			return GTE
		case token.LBRACE:
			return '{'
		case token.RBRACE:
			return '}'
		case token.ASSIGN:
			return '='
		case token.LPAREN:
			return '('
		case token.RPAREN:
			return ')'
		case token.LBRACK:
			return '['
		case token.RBRACK:
			return ']'
		case token.COMMA:
			return ','
		case token.PERIOD:
			return '.'
		case token.SEMICOLON:
			return ';'
		case token.COLON:
			return ':'
		case token.VAR:
			return VAR
		case token.FUNC:
			return FUNC
		case token.IDENT:
			if lit == "true" || lit == "false" {
				return BOOL
			}
			return IDENT
		case token.PACKAGE:
			return PACKAGE
		case token.MAP:
			return MAP
		case token.IF:
			return IF
		case token.ELSE:
			return ELSE
		case token.FOR:
			return FOR
		case token.RANGE:
			return RANGE
		case token.SWITCH:
			return SWITCH
		case token.CASE:
			return CASE
		case token.BREAK:
			return BREAK
		case token.CONTINUE:
			return CONTINUE
		case token.RETURN:
			return RETURN
		default:
			return int(tok)
		}
	}
}

// The parser calls this method on a parse error.
func (x *GosLex) Error(s string) {
	fmt.Printf("parse error: %s: %s", x.Fset.Position(x.Pos), s)
}

var GosExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	36, 46,
	-2, 2,
	-1, 27,
	26, 70,
	29, 70,
	32, 70,
	-2, 94,
	-1, 40,
	36, 46,
	-2, 3,
	-1, 70,
	36, 49,
	-2, 65,
	-1, 174,
	35, 26,
	-2, 24,
}

const GosPrivate = 57344

const GosLast = 332

var GosAct = [...]uint8{
	101, 128, 15, 129, 9, 12, 11, 122, 71, 121,
	18, 28, 7, 137, 20, 5, 158, 32, 35, 36,
	37, 38, 39, 145, 63, 66, 72, 69, 73, 65,
	21, 150, 178, 62, 179, 177, 26, 110, 148, 103,
	20, 169, 134, 103, 46, 64, 103, 25, 45, 27,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 87, 82, 102, 105, 27, 100, 27, 105,
	108, 100, 105, 109, 107, 111, 164, 104, 84, 113,
	115, 104, 72, 72, 104, 123, 27, 150, 117, 118,
	149, 32, 35, 36, 37, 38, 39, 148, 77, 85,
	147, 146, 103, 75, 76, 72, 166, 27, 136, 77,
	26, 133, 78, 139, 20, 106, 143, 132, 86, 174,
	135, 25, 77, 140, 141, 78, 19, 119, 105, 20,
	21, 151, 24, 80, 22, 72, 79, 155, 23, 81,
	104, 152, 130, 157, 156, 105, 80, 17, 123, 83,
	163, 123, 81, 60, 165, 159, 161, 104, 142, 74,
	160, 154, 59, 168, 153, 173, 172, 175, 3, 170,
	70, 120, 131, 40, 176, 127, 126, 125, 124, 180,
	32, 35, 36, 37, 38, 39, 116, 44, 42, 112,
	32, 35, 36, 37, 38, 39, 1, 13, 10, 26,
	30, 31, 34, 20, 27, 33, 14, 138, 29, 26,
	25, 61, 68, 20, 167, 19, 8, 67, 16, 21,
	25, 2, 171, 22, 162, 19, 6, 23, 43, 21,
	41, 4, 0, 22, 0, 0, 0, 23, 47, 48,
	52, 49, 50, 0, 51, 55, 56, 53, 54, 57,
	58, 55, 56, 53, 54, 57, 58, 0, 47, 48,
	52, 49, 50, 114, 51, 55, 56, 53, 54, 57,
	58, 32, 35, 36, 37, 38, 39, 0, 0, 144,
	0, 0, 0, 0, 0, 47, 48, 52, 49, 50,
	26, 51, 55, 56, 53, 54, 57, 58, 0, 0,
	0, 25, 20, 47, 48, 52, 49, 50, 0, 51,
	55, 56, 53, 54, 57, 58, 49, 50, 0, 51,
	55, 56, 53, 54, 57, 58, 32, 35, 36, 37,
	38, 39,
}

var GosPact = [...]int16{
	-26, -1000, -1000, 176, -1000, 184, -1000, -1000, 183, 12,
	8, -1000, -1000, -1000, -1000, 293, -1000, -1000, -1000, 149,
	186, 267, 13, 267, -1000, 267, 322, 79, 107, -1000,
	-1000, -1000, 29, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	176, 135, 45, 85, 28, -1000, -1000, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 267, 35,
	-1000, 87, -1000, 275, 92, -1000, 275, 1, 102, -1000,
	-1000, 47, 293, 228, -1000, -1000, -1000, 267, 182, 267,
	267, 167, 267, 174, 173, 172, 171, 149, 303, 303,
	234, 234, 234, 303, -1000, -1000, -1000, -1000, -1000, -1000,
	168, 88, 267, 9, 90, 77, -1000, -1000, -31, -1000,
	267, -1000, 167, 267, -1000, 248, -11, 47, 47, 68,
	-1000, 65, -1000, 293, -1000, -1000, -1000, -1000, 55, -1000,
	39, -1000, 267, 47, 160, 157, 98, -13, -20, 293,
	-1000, 120, 68, 293, -1000, 267, 156, -1000, 267, 42,
	149, -1000, 47, -1000, 75, -1000, -1000, -1000, 267, 6,
	-1000, -1000, 102, -1000, 115, -1000, 98, 102, -1000, -1000,
	-1000, 0, -1, -1000, 9, -1000, -1000, -1000, 98, -1000,
	-1000,
}

var GosPgo = [...]uint8{
	0, 231, 230, 228, 142, 226, 3, 1, 224, 222,
	221, 168, 12, 4, 218, 217, 214, 212, 6, 211,
	45, 11, 208, 2, 7, 132, 207, 9, 8, 206,
	205, 147, 202, 201, 200, 198, 10, 0, 5, 197,
	196, 189,
}

var GosR1 = [...]int8{
	0, 40, 10, 10, 1, 2, 2, 2, 3, 3,
	11, 11, 11, 5, 7, 7, 7, 6, 8, 8,
	8, 8, 9, 9, 4, 4, 37, 37, 37, 37,
	18, 19, 19, 19, 12, 12, 12, 12, 12, 12,
	35, 35, 35, 31, 36, 33, 13, 13, 13, 13,
	13, 14, 14, 38, 38, 38, 39, 39, 39, 39,
	29, 29, 15, 16, 26, 41, 17, 20, 20, 20,
	21, 21, 30, 32, 34, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	28, 28, 25, 25, 25, 25, 22, 22, 22, 22,
	22, 27, 27, 27, 24,
}

var GosR2 = [...]int8{
	0, 1, 1, 2, 2, 1, 3, 3, 3, 3,
	0, 2, 2, 7, 0, 1, 3, 2, 0, 1,
	3, 3, 1, 3, 1, 3, 1, 3, 5, 3,
	3, 0, 1, 2, 2, 2, 1, 1, 1, 1,
	3, 5, 4, 3, 3, 4, 0, 1, 1, 1,
	1, 2, 2, 3, 5, 5, 2, 3, 7, 3,
	1, 2, 1, 1, 1, 0, 3, 1, 1, 1,
	1, 3, 4, 3, 6, 1, 3, 3, 3, 3,
	3, 3, 3, 2, 3, 3, 3, 3, 3, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 3, 1,
}

var GosChk = [...]int16{
	-1000, -40, -10, -11, -1, 41, -5, -12, 40, -13,
	-35, -18, -38, -39, -29, -23, -14, -31, -36, 39,
	27, 43, 47, 51, -25, 34, 23, -20, -21, -22,
	-34, -33, 4, -30, -32, 5, 6, 7, 8, 9,
	-11, -2, 4, -3, 4, 36, 36, 10, 11, 13,
	14, 16, 12, 19, 20, 17, 18, 21, 22, -4,
	4, -19, -12, -23, -20, -18, -23, -15, -17, -13,
	-31, -28, -23, -23, -25, 24, 25, 30, 33, 29,
	26, 32, 34, 14, 33, 14, 33, 34, -23, -23,
	-23, -23, -23, -23, -23, -23, -23, -23, -23, -23,
	32, -37, 29, 4, 42, 30, 28, -12, -18, -18,
	36, -18, -41, 32, 35, -23, 4, -28, -28, -20,
	4, -27, -24, -23, 4, 4, 4, 4, -7, -6,
	-4, 4, 29, -28, 33, 30, 31, 44, -26, -23,
	-36, -21, -20, -23, 31, 34, 33, 35, 32, 35,
	32, -37, -28, 4, 4, -37, -18, -38, 36, -27,
	4, -24, -8, -37, 34, -6, 31, -16, -13, 35,
	-18, -9, -7, -37, 4, -37, -18, 35, 32, 35,
	-37,
}

var GosDef = [...]int8{
	10, -2, 1, -2, 10, 0, 11, 12, 0, 0,
	0, 36, 37, 38, 39, 47, 48, 49, 50, 0,
	31, 0, 46, 60, 75, 0, 0, -2, 0, 92,
	93, 95, 67, 68, 69, 96, 97, 98, 99, 100,
	-2, 4, 5, 0, 0, 34, 35, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	24, 46, 32, 0, 94, 56, 47, 0, 0, 62,
	-2, 61, 90, 0, 83, 51, 52, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 14, 77, 78,
	79, 80, 81, 82, 84, 85, 86, 87, 88, 89,
	0, 40, 0, 26, 0, 0, 30, 33, 53, 57,
	0, 59, 0, 0, 76, 0, 73, 43, 44, 71,
	67, 0, 102, 104, 7, 8, 6, 9, 0, 15,
	0, 25, 0, 42, 0, 0, 0, 0, 0, 64,
	66, 0, 70, 91, 72, 101, 0, 45, 0, 18,
	0, 17, 41, 27, 0, 29, 54, 55, 46, 0,
	73, 103, 0, 19, 14, 16, 0, 0, 63, 74,
	13, 0, 0, 22, -2, 28, 58, 20, 0, 21,
	23,
}

var GosTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 23, 3, 3, 3, 3, 3, 3,
	34, 35, 13, 10, 32, 11, 33, 14, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 37, 36,
	3, 29, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 30, 3, 31, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 27, 3, 28,
}

var GosTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 12, 15,
	16, 17, 18, 19, 20, 21, 22, 24, 25, 26,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51,
}

var GosTok3 = [...]int8{
	0,
}

var GosErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	GosDebug        = 0
	GosErrorVerbose = false
)

type GosLexer interface {
	Lex(lval *GosSymType) int
	Error(s string)
}

type GosParser interface {
	Parse(GosLexer) int
	Lookahead() int
}

type GosParserImpl struct {
	lval  GosSymType
	stack [GosInitialStackSize]GosSymType
	char  int
}

func (p *GosParserImpl) Lookahead() int {
	return p.char
}

func GosNewParser() GosParser {
	return &GosParserImpl{}
}

const GosFlag = -1000

func GosTokname(c int) string {
	if c >= 1 && c-1 < len(GosToknames) {
		if GosToknames[c-1] != "" {
			return GosToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func GosStatname(s int) string {
	if s >= 0 && s < len(GosStatenames) {
		if GosStatenames[s] != "" {
			return GosStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func GosErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !GosErrorVerbose {
		return "syntax error"
	}

	for _, e := range GosErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + GosTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(GosPact[state])
	for tok := TOKSTART; tok-1 < len(GosToknames); tok++ {
		if n := base + tok; n >= 0 && n < GosLast && int(GosChk[int(GosAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if GosDef[state] == -2 {
		i := 0
		for GosExca[i] != -1 || int(GosExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; GosExca[i] >= 0; i += 2 {
			tok := int(GosExca[i])
			if tok < TOKSTART || GosExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if GosExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += GosTokname(tok)
	}
	return res
}

func Goslex1(lex GosLexer, lval *GosSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(GosTok1[0])
		goto out
	}
	if char < len(GosTok1) {
		token = int(GosTok1[char])
		goto out
	}
	if char >= GosPrivate {
		if char < GosPrivate+len(GosTok2) {
			token = int(GosTok2[char-GosPrivate])
			goto out
		}
	}
	for i := 0; i < len(GosTok3); i += 2 {
		token = int(GosTok3[i+0])
		if token == char {
			token = int(GosTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(GosTok2[1]) /* unknown char */
	}
	if GosDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", GosTokname(token), uint(char))
	}
	return char, token
}

func GosParse(Goslex GosLexer) int {
	return GosNewParser().Parse(Goslex)
}

func (Gosrcvr *GosParserImpl) Parse(Goslex GosLexer) int {
	var Gosn int
	var GosVAL GosSymType
	var GosDollar []GosSymType
	_ = GosDollar // silence set and not used
	GosS := Gosrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Gosstate := 0
	Gosrcvr.char = -1
	Gostoken := -1 // Gosrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Gosstate = -1
		Gosrcvr.char = -1
		Gostoken = -1
	}()
	Gosp := -1
	goto Gosstack

ret0:
	return 0

ret1:
	return 1

Gosstack:
	/* put a state and value onto the stack */
	if GosDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", GosTokname(Gostoken), GosStatname(Gosstate))
	}

	Gosp++
	if Gosp >= len(GosS) {
		nyys := make([]GosSymType, len(GosS)*2)
		copy(nyys, GosS)
		GosS = nyys
	}
	GosS[Gosp] = GosVAL
	GosS[Gosp].yys = Gosstate

Gosnewstate:
	Gosn = int(GosPact[Gosstate])
	if Gosn <= GosFlag {
		goto Gosdefault /* simple state */
	}
	if Gosrcvr.char < 0 {
		Gosrcvr.char, Gostoken = Goslex1(Goslex, &Gosrcvr.lval)
	}
	Gosn += Gostoken
	if Gosn < 0 || Gosn >= GosLast {
		goto Gosdefault
	}
	Gosn = int(GosAct[Gosn])
	if int(GosChk[Gosn]) == Gostoken { /* valid shift */
		Gosrcvr.char = -1
		Gostoken = -1
		GosVAL = Gosrcvr.lval
		Gosstate = Gosn
		if Errflag > 0 {
			Errflag--
		}
		goto Gosstack
	}

Gosdefault:
	/* default state action */
	Gosn = int(GosDef[Gosstate])
	if Gosn == -2 {
		if Gosrcvr.char < 0 {
			Gosrcvr.char, Gostoken = Goslex1(Goslex, &Gosrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if GosExca[xi+0] == -1 && int(GosExca[xi+1]) == Gosstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Gosn = int(GosExca[xi+0])
			if Gosn < 0 || Gosn == Gostoken {
				break
			}
		}
		Gosn = int(GosExca[xi+1])
		if Gosn < 0 {
			goto ret0
		}
	}
	if Gosn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Goslex.Error(GosErrorMessage(Gosstate, Gostoken))
			Nerrs++
			if GosDebug >= 1 {
				__yyfmt__.Printf("%s", GosStatname(Gosstate))
				__yyfmt__.Printf(" saw %s\n", GosTokname(Gostoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Gosp >= 0 {
				Gosn = int(GosPact[GosS[Gosp].yys]) + GosErrCode
				if Gosn >= 0 && Gosn < GosLast {
					Gosstate = int(GosAct[Gosn]) /* simulate a shift of "error" */
					if int(GosChk[Gosstate]) == GosErrCode {
						goto Gosstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if GosDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", GosS[Gosp].yys)
				}
				Gosp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if GosDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", GosTokname(Gostoken))
			}
			if Gostoken == GosEofCode {
				goto ret1
			}
			Gosrcvr.char = -1
			Gostoken = -1
			goto Gosnewstate /* try again in the same state */
		}
	}

	/* reduction by production Gosn */
	if GosDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Gosn, GosStatname(Gosstate))
	}

	Gosnt := Gosn
	Gospt := Gosp
	_ = Gospt // guard against "declared and not used"

	Gosp -= int(GosR2[Gosn])
	// Gosp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if Gosp+1 >= len(GosS) {
		nyys := make([]GosSymType, len(GosS)*2)
		copy(nyys, GosS)
		GosS = nyys
	}
	GosVAL = GosS[Gosp+1]

	/* consult goto table to find next state */
	Gosn = int(GosR1[Gosn])
	Gosg := int(GosPgo[Gosn])
	Gosj := Gosg + GosS[Gosp].yys + 1

	if Gosj >= GosLast {
		Gosstate = int(GosAct[Gosg])
	} else {
		Gosstate = int(GosAct[Gosj])
		if int(GosChk[Gosstate]) != -Gosn {
			Gosstate = int(GosAct[Gosg])
		}
	}
	// dummy call; replaced with literal code
	switch Gosnt {

	case 1:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			Goslex.(*GosLex).File = GosDollar[1].File
		}
	case 2:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.File = File{pckg: "", parts: GosDollar[1].fileContents, pos: Goslex.(*GosLex).Pos}
		}
	case 3:
		GosDollar = GosS[Gospt-2 : Gospt+1]
		{
			GosVAL.File = File{pckg: GosDollar[1].val, parts: GosDollar[2].fileContents, pos: Goslex.(*GosLex).Pos}
		}
	case 4:
		GosDollar = GosS[Gospt-2 : Gospt+1]
		{
			GosVAL.val = GosDollar[2].val
		}
	case 5:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.val = GosDollar[1].val
		}
	case 6:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.val = GosDollar[1].val + "/" + GosDollar[3].val
		}
	case 7:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.val = GosDollar[1].val + "/" + GosDollar[3].val
		}
	case 8:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.val = GosDollar[1].val + "." + GosDollar[3].val
		}
	case 9:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.val = GosDollar[1].val + "." + GosDollar[3].val
		}
	case 10:
		GosDollar = GosS[Gospt-0 : Gospt+1]
		{
			GosVAL.fileContents = []any{}
		}
	case 11:
		GosDollar = GosS[Gospt-2 : Gospt+1]
		{
			GosVAL.fileContents = append(GosDollar[1].fileContents, GosDollar[2].fn)
		}
	case 12:
		GosDollar = GosS[Gospt-2 : Gospt+1]
		{
			GosVAL.fileContents = append(GosDollar[1].fileContents, GosDollar[2].statement)
		}
	case 13:
		GosDollar = GosS[Gospt-7 : Gospt+1]
		{
			GosVAL.fn = &function{name: GosDollar[2].val, args: GosDollar[4].args, ret: GosDollar[6].args, body: GosDollar[7].statement, pos: Goslex.(*GosLex).Pos}
		}
	case 14:
		GosDollar = GosS[Gospt-0 : Gospt+1]
		{
			GosVAL.args = []*varDef{}
		}
	case 15:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.args = []*varDef{GosDollar[1].arg}
		}
	case 16:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.args = append(GosDollar[1].args, GosDollar[3].arg)
		}
	case 17:
		GosDollar = GosS[Gospt-2 : Gospt+1]
		{
			GosVAL.arg = &varDef{names: GosDollar[1].vals, tip: GosDollar[2].typeRef, pos: Goslex.(*GosLex).Pos}
		}
	case 18:
		GosDollar = GosS[Gospt-0 : Gospt+1]
		{
			GosVAL.args = []*varDef{}
		}
	case 19:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.args = []*varDef{&varDef{tip: GosDollar[1].typeRef, pos: Goslex.(*GosLex).Pos}}
		}
	case 20:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.args = GosDollar[2].args
		}
	case 21:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.args = GosDollar[2].args
		}
	case 22:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.args = []*varDef{&varDef{tip: GosDollar[1].typeRef, pos: Goslex.(*GosLex).Pos}}
		}
	case 23:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.args = append(GosDollar[1].args, &varDef{tip: GosDollar[3].typeRef, pos: Goslex.(*GosLex).Pos})
		}
	case 24:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.vals = []string{GosDollar[1].val}
		}
	case 25:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.vals = append(GosDollar[1].vals, GosDollar[3].val)
		}
	case 26:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.typeRef = &typeRef{name: GosDollar[1].val, pos: Goslex.(*GosLex).Pos}
		}
	case 27:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.typeRef = &typeRef{pckg: GosDollar[1].val, name: GosDollar[3].val, pos: Goslex.(*GosLex).Pos}
		}
	case 28:
		GosDollar = GosS[Gospt-5 : Gospt+1]
		{
			GosVAL.typeRef = &typeRef{mapKey: GosDollar[3].val, elem: GosDollar[5].typeRef, pos: Goslex.(*GosLex).Pos}
		}
	case 29:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.typeRef = &typeRef{elem: GosDollar[3].typeRef, pos: Goslex.(*GosLex).Pos}
		}
	case 30:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.statement = &statement{kind: stmtKindBlock, stmt: GosDollar[2].statements, pos: Goslex.(*GosLex).Pos}
		}
	case 31:
		GosDollar = GosS[Gospt-0 : Gospt+1]
		{
			GosVAL.statements = []*statement{}
		}
	case 32:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.statements = []*statement{GosDollar[1].statement}
		}
	case 33:
		GosDollar = GosS[Gospt-2 : Gospt+1]
		{
			GosVAL.statements = append(GosDollar[1].statements, GosDollar[2].statement)
		}
	case 34:
		GosDollar = GosS[Gospt-2 : Gospt+1]
		{
			GosVAL.statement = GosDollar[1].statement
		}
	case 35:
		GosDollar = GosS[Gospt-2 : Gospt+1]
		{
			GosVAL.statement = &statement{kind: stmtKindVar, stmt: GosDollar[1].varDef, pos: Goslex.(*GosLex).Pos}
		}
	case 36:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.statement = GosDollar[1].statement
		}
	case 37:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.statement = &statement{kind: stmtKindIf, stmt: GosDollar[1].ifStatement, pos: Goslex.(*GosLex).Pos}
		}
	case 38:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.statement = &statement{kind: stmtKindFor, stmt: GosDollar[1].forStatement, pos: Goslex.(*GosLex).Pos}
		}
	case 39:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.statement = &statement{kind: stmtKindRet, stmt: GosDollar[1].expressions, pos: Goslex.(*GosLex).Pos}
		}
	case 40:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.varDef = &varDef{names: GosDollar[2].vals, tip: GosDollar[3].typeRef, pos: Goslex.(*GosLex).Pos}
		}
	case 41:
		GosDollar = GosS[Gospt-5 : Gospt+1]
		{
			GosVAL.varDef = &varDef{names: GosDollar[2].vals, tip: GosDollar[3].typeRef, init: GosDollar[5].expressions, pos: Goslex.(*GosLex).Pos}
		}
	case 42:
		GosDollar = GosS[Gospt-4 : Gospt+1]
		{
			GosVAL.varDef = &varDef{names: GosDollar[2].vals, init: GosDollar[4].expressions, pos: Goslex.(*GosLex).Pos}
		}
	case 43:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.assignment = &assignment{left: GosDollar[1].lvList, right: GosDollar[3].expressions, pos: Goslex.(*GosLex).Pos}
			for _, lv := range GosDollar[1].lvList {
				lv.forAssignment = true
			}
		}
	case 44:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.varDef = &varDef{lvalues: GosDollar[1].lvList, init: GosDollar[3].expressions, pos: Goslex.(*GosLex).Pos}
		}
	case 45:
		GosDollar = GosS[Gospt-4 : Gospt+1]
		{
			GosVAL.funcCall = &funcCall{name: GosDollar[1].val, params: GosDollar[3].expressions, pos: Goslex.(*GosLex).Pos}
		}
	case 46:
		GosDollar = GosS[Gospt-0 : Gospt+1]
		{
			GosVAL.statement = &statement{kind: stmtKindEmpty, pos: Goslex.(*GosLex).Pos}
		}
	case 47:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.statement = &statement{kind: stmtKindExpression, stmt: GosDollar[1].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 48:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.statement = GosDollar[1].statement
		}
	case 49:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.statement = &statement{kind: stmtKindAssign, stmt: GosDollar[1].assignment, pos: Goslex.(*GosLex).Pos}
		}
	case 50:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.statement = &statement{kind: stmtKindInit, stmt: GosDollar[1].varDef, pos: Goslex.(*GosLex).Pos}
		}
	case 51:
		GosDollar = GosS[Gospt-2 : Gospt+1]
		{
			GosVAL.statement = &statement{kind: stmtKindInc, stmt: GosDollar[1].lvalue, pos: Goslex.(*GosLex).Pos}
		}
	case 52:
		GosDollar = GosS[Gospt-2 : Gospt+1]
		{
			GosVAL.statement = &statement{kind: stmtKindDec, stmt: GosDollar[1].lvalue, pos: Goslex.(*GosLex).Pos}
		}
	case 53:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.ifStatement = &ifStatement{condition: GosDollar[2].expression, thn: GosDollar[3].statement, pos: Goslex.(*GosLex).Pos}
		}
	case 54:
		GosDollar = GosS[Gospt-5 : Gospt+1]
		{
			GosVAL.ifStatement = &ifStatement{condition: GosDollar[2].expression, thn: GosDollar[3].statement, els: GosDollar[5].statement, pos: Goslex.(*GosLex).Pos}
		}
	case 55:
		GosDollar = GosS[Gospt-5 : Gospt+1]
		{
			GosVAL.ifStatement = &ifStatement{condition: GosDollar[2].expression, thn: GosDollar[3].statement, els: &statement{kind: stmtKindIf, stmt: GosDollar[5].ifStatement, pos: Goslex.(*GosLex).Pos}}
		}
	case 56:
		GosDollar = GosS[Gospt-2 : Gospt+1]
		{
			GosVAL.forStatement = &forStatement{block: GosDollar[2].statement, pos: Goslex.(*GosLex).Pos}
		}
	case 57:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.forStatement = &forStatement{condition: GosDollar[2].expression, block: GosDollar[3].statement, pos: Goslex.(*GosLex).Pos}
		}
	case 58:
		GosDollar = GosS[Gospt-7 : Gospt+1]
		{
			GosVAL.forStatement = &forStatement{condition: GosDollar[4].expression, initStmt: GosDollar[2].statement, postStmt: GosDollar[6].statement, block: GosDollar[7].statement, pos: Goslex.(*GosLex).Pos}
		}
	case 59:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.forStatement = &forStatement{rangeStmt: GosDollar[2].statement, block: GosDollar[3].statement, pos: Goslex.(*GosLex).Pos}
		}
	case 60:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.expressions = []*expression(nil)
		}
	case 61:
		GosDollar = GosS[Gospt-2 : Gospt+1]
		{
			GosVAL.expressions = GosDollar[2].expressions
		}
	case 62:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.statement = GosDollar[1].statement
		}
	case 63:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.statement = GosDollar[1].statement
		}
	case 64:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.expression = GosDollar[1].expression
		}
	case 65:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.statement = &statement{kind: stmtKindAssign, stmt: GosDollar[1].assignment, pos: Goslex.(*GosLex).Pos}
		}
	case 66:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.statement = &statement{kind: stmtKindInit, stmt: GosDollar[1].assignment, pos: Goslex.(*GosLex).Pos}
		}
	case 67:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.lvalue = &lvalue{kind: lvalueKindIdent, stmt: GosDollar[1].val, pos: Goslex.(*GosLex).Pos}
		}
	case 68:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.lvalue = &lvalue{kind: lvalueKindIndex, stmt: GosDollar[1].arrayAccess, pos: Goslex.(*GosLex).Pos}
		}
	case 69:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.lvalue = &lvalue{kind: lvalueKindField, stmt: GosDollar[1].fieldAccess, pos: Goslex.(*GosLex).Pos}
		}
	case 70:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.lvList = []*lvalue{GosDollar[1].lvalue}
		}
	case 71:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.lvList = append(GosDollar[1].lvList, GosDollar[3].lvalue)
		}
	case 72:
		GosDollar = GosS[Gospt-4 : Gospt+1]
		{
			GosVAL.arrayAccess = &arrayAccess{lvalue: GosDollar[1].lvalue, expression: GosDollar[3].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 73:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.fieldAccess = &fieldAccess{lvalue: GosDollar[1].lvalue, field: GosDollar[3].val, pos: Goslex.(*GosLex).Pos}
		}
	case 74:
		GosDollar = GosS[Gospt-6 : Gospt+1]
		{
			GosVAL.methodCall = &methodCall{lvalue: GosDollar[1].lvalue, name: GosDollar[3].val, params: GosDollar[5].expressions, pos: Goslex.(*GosLex).Pos}
		}
	case 75:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.expression = GosDollar[1].expression
		}
	case 76:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindParens, left: GosDollar[2].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 77:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindSum, left: GosDollar[1].expression, right: GosDollar[3].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 78:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindSub, left: GosDollar[1].expression, right: GosDollar[3].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 79:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindMul, left: GosDollar[1].expression, right: GosDollar[3].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 80:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindDiv, left: GosDollar[1].expression, right: GosDollar[3].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 81:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindAnd, left: GosDollar[1].expression, right: GosDollar[3].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 82:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindOr, left: GosDollar[1].expression, right: GosDollar[3].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 83:
		GosDollar = GosS[Gospt-2 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindNot, left: GosDollar[2].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 84:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindEqualTo, left: GosDollar[1].expression, right: GosDollar[3].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 85:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindNotEqualTo, left: GosDollar[1].expression, right: GosDollar[3].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 86:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindGreaterThan, left: GosDollar[1].expression, right: GosDollar[3].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 87:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindLessThan, left: GosDollar[1].expression, right: GosDollar[3].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 88:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindGreaterThanOrEqualTo, left: GosDollar[1].expression, right: GosDollar[3].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 89:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindLessThanOrEqualTo, left: GosDollar[1].expression, right: GosDollar[3].expression, pos: Goslex.(*GosLex).Pos}
		}
	case 90:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.expressions = []*expression{GosDollar[1].expression}
		}
	case 91:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expressions = append(GosDollar[1].expressions, GosDollar[3].expression)
		}
	case 92:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindConst, left: GosDollar[1].constant, pos: Goslex.(*GosLex).Pos}
		}
	case 93:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			{
				GosVAL.expression = &expression{kind: expressionKindMethod, left: GosDollar[1].methodCall, pos: Goslex.(*GosLex).Pos}
			}
		}
	case 94:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.expression = &expression{kind: expressionKindLValue, left: GosDollar[1].lvalue, pos: Goslex.(*GosLex).Pos}
		}
	case 95:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			{
				GosVAL.expression = &expression{kind: expressionKindFunc, left: GosDollar[1].funcCall, pos: Goslex.(*GosLex).Pos}
			}
		}
	case 96:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.constant = &constant{kind: constKindInt, value: GosDollar[1].val, pos: Goslex.(*GosLex).Pos}
		}
	case 97:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.constant = &constant{kind: constKindFloat, value: GosDollar[1].val, pos: Goslex.(*GosLex).Pos}
		}
	case 98:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.constant = &constant{kind: constKindChar, value: GosDollar[1].val, pos: Goslex.(*GosLex).Pos}
		}
	case 99:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.constant = &constant{kind: constKindString, value: GosDollar[1].val, pos: Goslex.(*GosLex).Pos}
		}
	case 100:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.constant = &constant{kind: constKindBool, value: GosDollar[1].val, pos: Goslex.(*GosLex).Pos}
		}
	case 101:
		GosDollar = GosS[Gospt-0 : Gospt+1]
		{
			GosVAL.expressions = []*expression{}
		}
	case 102:
		GosDollar = GosS[Gospt-1 : Gospt+1]
		{
			GosVAL.expressions = []*expression{GosDollar[1].expression}
		}
	case 103:
		GosDollar = GosS[Gospt-3 : Gospt+1]
		{
			GosVAL.expressions = append(GosDollar[1].expressions, GosDollar[3].expression)
		}
	}
	goto Gosstack /* stack new state and value */
}
